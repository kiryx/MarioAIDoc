Jednym z prostszych przykładów zastosowania sztucznej inteligencji w grach komputerowych są gry logiczne. 
Podstawowym algorytmem stosowanym w projektowaniu sztucznej inteligencji jest algorytm minmax. Dotyczy on gier o sumie stałej -- proporcja zysku jednego z graczy do straty drugiego jest stała. 
Najprostszym przykładem jest gra ``Kółko i krzyżyk'' gdzie budowane jest rekurencyjne drzewo wywołań kolejno generujące wszystkie możliwe stany gry. 
W kolejnych momentach gry obraj gracze wykonują na przemian ruchy.
W dowolnym momencie gry możemy przeanalizować wszystkie możliwe posunięcia graczy, przyporządkowując im wartość punktową odpowiadającą za zysk gracza.
Łatwo zauważyć iż algorytm taki ma ogromną złożoność i jedynie dla małych gier takich jak kółko i krzyżyk daje wynik w realnym czasie.
Bez optymalizacji, obraz brania pod uwagę symetrii planszy, daje to drzewo wywołań składające się 9! węzłów (łącznie z liściami). 
Oczywiście algorytm można zoptymalizować chociażby poprzez programowanie dynamiczne, lecz nawet jego mało optymalna wersja działa dość szybko na współczesnych komputerach z racji na mały rozmiar danych.
\begin{par}
Przez lata szachy były jedną z gier niemożliwych do rozwiązania za pomocą powyższego podejścia.
Nawet do dzisiaj najlepsze programy szachowe nie są w stanie przeanalizować wszystkich możliwych ruchów a jedynie kilkadziesiąt ruchów w przód.
Przy zastosowaniu odpowiednich strategii, optymalizacji, oraz dużej mocy obliczeniowej współczesnych komputerów, programy szachowe wygrywają z najlepszymi graczami.
Nieco inna sytuacja jest w grze GO, gdzie plansza rozmiaru 19x19 stanowi nielada wyzwanie nawet dla superkomputerów. 
Do dziś nie stworzono programu który wygrałby z profesjonalnymi zawodnikami GO.
\end{par}
